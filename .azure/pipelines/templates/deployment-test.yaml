parameters:
- name: namespace
  type: string
  default: default
- name: serviceName
  type: string
- name: serviceVersion
  type: string
- name: attempts
  type: number
  default: 30
- name: timeout
  type: number
  default: 10

steps:
  - bash: |
    set +e

    function check {
      if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo -1
      elif [ $# -eq 1 ]; then
        pod=$1
        port=8080
      else
        pod=$1
        port=$2
      fi

      kubectl port-forward -n ${NS} pod/${pod} ${port}:${port} &>/dev/null &
      sleep ${TIMEOUT}
      response_file='response.txt'
      status_code=`curl -s -o ./${response_file} -w "%{http_code}" "http://localhost:${port}/info"`
      r_body=`cat ./${response_file}`
      kill $!

      if [ ${status_code} -ne 200 ]; then
        echo "1"
      else
        s_version=`echo ${r_body} | jq -r ".build.version"`
        if [ "${s_version}" == "${VERSION}" ]; then
          echo "0"
        else
          echo "2"
        fi
      fi
    }

    echo "Retrieving service ${SRV} endpoints in namespace ${NS}"
    for i in `seq 0 ${ATTEMPTS}`; do
      deployed=true
      endpoints=`kubectl -n ${NS} get endpoints ${SRV} --no-headers | awk '{ print $2 }'`
      for endpoint in ${endpoints}; do
        host=`echo ${endpoint} | cut -d : -f 1`
        port=`echo ${endpoint} | cut -d : -f 2`
        pod=`kubectl get pods -o wide -n ${NS} --no-headers | grep ${host} | awk '{ print $1 }'`
        echo "Checking host: ${host}; port: ${port}; pod: ${pod}"
        result=`check ${pod} ${port}`
        if [ "${result}" -ne "0" ]; then
          deployed=false
          if [ "${result}" == "1" ]; then
            echo "Invalid response code"
          elif [ "${result}" == "2" ]; then
            echo "Invalid version"
          else
            echo "Unknown error: ${result}"
          fi
          break
        fi
      done
      if $deployed; then
        echo "A service is UP"
        exit 0
      fi
    done
    echo "Verification failed"
    exit 1
  displayName: 'Deployment test'
  name: deploymentTest
  env:
    SRV: ${{ parameters.serviceName }}
    NS: ${{ parameters.namespace }}
    ATTEMPTS: ${{ parameters.attempts }}
    TIMEOUT: ${{ parameters.timeout }}
    VERSION: ${{ parameters.serviceVersion }}

