name: service-api
resources:
  containers:
  - container: kaniko
    image: 'gcr.io/kaniko-project/executor:$(kaniko-version)'
  repositories:
    - repository: rpKubernetes
      type: github
      name: reportportal/kubernetes
      endpoint: reportportal
    - repository: jdiRest
      type: github
      name: jdi-examples/jdi-dark-report-portal-demo
      endpoint: reportportal

trigger:
- stable-azure

stages:
# - stage: assemble
#   jobs:
#   - job: build
#     pool: 
#       vmImage: $(vm-image)
#     steps:
#     - bash: |
#         snapshotVersion=`cat $(version-file) | grep $(version-property) | cut -d '=' -f2-`
#         echo "##vso[task.setvariable variable=snapshotVersion;isOutput=true]$snapshotVersion"

#         buildVersion=`echo AZURE-BUILD-$(Build.BuildId)`
#         echo "##vso[task.setvariable variable=buildVersion;isOutput=true]$buildVersion"
        
#         serviceVersion=`echo "${snapshotVersion}-${buildVersion}"`
#         echo "##vso[task.setvariable variable=serviceVersion;isOutput=true]$serviceVersion"
#         tag=`echo "$serviceVersion" | tr '[:upper:]' '[:lower:]'`
#         echo "##vso[task.setvariable variable=tag;isOutput=true]$tag"
#       name: getVersions
#       displayName: 'Get application versions'

#     - bash: |
#         echo "$(getVersions.snapshotVersion)"
#         echo "$(getVersions.buildVersion)"
#         echo "$(getVersions.serviceVersion)"
#         echo "$(getVersions.tag)"
#       displayName: 'Print application versions'

#     - task: Docker@2
#       displayName: Login to GCR
#       inputs:
#         command: login
#         repository: $(repository)
#         containerRegistry: gcr-rp-demo

#     - task: Docker@2
#       displayName: Build container
#       inputs:
#         command: build
#         Dockerfile: 'docker/Dockerfile-develop'
#         repository: $(repository)
#         tags: '$(getVersions.tag)'
#         buildContext: '$(Build.Repository.LocalPath)'
#         arguments: '--build-arg buildNumber=$(getVersions.buildVersion)'

#     - task: Docker@2
#       displayName: Push image
#       inputs:
#         command: push
#         repository: $(repository)
#         tags: '$(getVersions.tag)'

#     - task: Docker@2
#       displayName: Logout from ACR
#       inputs:
#         command: logout
#         containerRegistry: gcr-rp-demo

# - stage: deploy
#   dependsOn: assemble
#   variables:
#     tag: $[ stageDependencies.assemble.build.outputs['getVersions.tag'] ]
#     serviceVersion: $[ stageDependencies.assemble.build.outputs['getVersions.serviceVersion'] ]
#   jobs:
#   - job: install
#     pool: 
#       vmImage: $(vm-image)
#     steps:

#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: |
#           git.epam.com,217.21.63.117 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDT6RwUv9Mis/38mDtHK3dKcXGJ+nhucUwCSTh0dMu66Ui2/5DrJ1XadJ2vOATGPwzEtlhmstKHs6pDegmxBOq0=
#         sshKeySecureFile: 'epm-gitlab-key'

#     - task: HelmInstaller@0
#       inputs:
#         helmVersion: '3.3.4'
#         installKubectl: true

#     - bash: |
#         cd ..
#         git clone git@git.epam.com:epmc-tst/reportportal-ci.git --progress --branch master --single-branch --depth=1
#       displayName: 'Clone CI repository'

#     - checkout: rpKubernetes

#     - bash: |
#         helm repo add bitnami https://charts.bitnami.com/bitnami
#         helm repo add elastic https://helm.elastic.co
#         helm repo update
#         helm dependency update reportportal/v5/
#       displayName: 'Helm setup'

#     - task: HelmDeploy@0
#       inputs:
#         connectionType: 'Kubernetes Service Connection'
#         kubernetesServiceConnection: 'gke-rp-demo'
#         namespace: '$(namespace)'
#         command: 'upgrade'
#         chartType: 'FilePath'
#         chartPath: 'reportportal/v5/'
#         releaseName: 'reportportal'
#         overrideValues: '"serviceapi.repository=gcr.io/or2-msq-epmc-tst-t1iylu/reportportal/service-api,serviceapi.tag=$(tag),serviceapi.jvmArgs=-Xms2G\ -Xmx3g\ -DLOG_FILE=app.log\ -XX:+HeapDumpOnOutOfMemoryError\ -XX:HeapDumpPath=/tmp\ -agentpath:/app/drill/libdrill_agent.so=agentId=api-service\,drillInstallationDir=/app/drill\,adminAddress=drill4j-admin.ci.svc.cluster.local:8090\,buildVersion=$(tag)"'
#         valueFile: '../reportportal-ci/rp/values-ci.yml'
#         install: false
#         waitForExecution: false

#   - job: verify
#     dependsOn: install
#     pool: 
#       vmImage: $(vm-image)
#     steps:

#     - task: Kubernetes@1
#       displayName: 'Login to kubernetes'
#       inputs:
#         connectionType: 'Kubernetes Service Connection'
#         kubernetesServiceEndpoint: 'gke-rp-demo'
#         namespace: 'reportportal'
#         command: 'login'

#     - bash: |
#         set +e
        
#         function check {
#           if [ $# -eq 0 ] || [ $# -gt 2 ]; then
#             echo -1
#           elif [ $# -eq 1 ]; then
#             pod=$1
#             port=8080
#           else
#             pod=$1
#             port=$2
#           fi

#           kubectl port-forward -n ${NS} pod/${pod} ${port}:${port} &>/dev/null &
#           sleep ${TIMEOUT}
#           response_file='response.txt'
#           status_code=`curl -s -o ./${response_file} -w "%{http_code}" "http://localhost:${port}/info"`
#           r_body=`cat ./${response_file}`
#           kill $!

#           if [ ${status_code} -ne 200 ]; then
#             echo "1"
#           else
#             s_version=`echo ${r_body} | jq -r ".build.version"`
#             if [ "${s_version}" == "${VERSION}" ]; then
#               echo "0"
#             else
#               echo "2"
#             fi
#           fi
#         }

#         echo "Retrieving service ${SRV} endpoints in namespace ${NS}"
#         for i in `seq 0 ${ATTEMPTS}`; do
#           deployed=true
#           endpoints=`kubectl -n ${NS} get endpoints ${SRV} --no-headers | awk '{ print $2 }'`
#           for endpoint in ${endpoints}; do
#             host=`echo ${endpoint} | cut -d : -f 1`
#             port=`echo ${endpoint} | cut -d : -f 2`
#             pod=`kubectl get pods -o wide -n ${NS} --no-headers | grep ${host} | awk '{ print $1 }'`
#             echo "Checking host: ${host}; port: ${port}; pod: ${pod}"
#             result=`check ${pod} ${port}`
#             if [ "${result}" -ne "0" ]; then
#               deployed=false
#               if [ "${result}" == "1" ]; then
#                 echo "Invalid response code"
#               elif [ "${result}" == "2" ]; then
#                 echo "Invalid version"
#               else
#                 echo "Unknown error: ${result}"
#               fi
#               break
#             fi
#           done
#           if $deployed; then
#             echo "A service is UP"
#             exit 0
#           fi
#         done
#         echo "Verification failed"
#         exit 1
#       displayName: 'Deployment test'
#       name: deploymentTest
#       env:
#         SRV: reportportal-api
#         NS: $(namespace)
#         ATTEMPTS: 30
#         TIMEOUT: 10
#         VERSION: $(serviceVersion)

- stage: test
  # dependsOn: deploy
  jobs:
  - job: apiTests
    pool: 
      vmImage: $(vm-image)
    steps:
    - checkout: jdiRest

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'
    
    - bash: |
        `kubectl get secret jdi-test-secret -o json -n ci | jq -r '.data | to_entries | map([.key, .value]|join("="))|join("\n")'|sed -E -n 's/([^=]+)=(.+)/echo "##vso[task.setvariable variable=\1;isOutput=true;issecret=true]$(echo "\2" | base64 -d)"/ p' >credentials.sh`
        source credentials.sh
      name: getSecretsStep
      displayName: 'Get secrets'

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: >-
          -Dsut.username=$(getSecretsStep.TEST_USER_LOGIN)
          -Dsut.password=$(getSecretsStep.TEST_USER_PASSWORD)
          -Pdev_env -Preport
          -Dbuild.tag="AZURE-BUILD-$(Build.BuildId)"
          -Drp.uuid=$RP_UUID
          -Drp.project=$(getSecretsStep.RP_PROJECT)
          -Drp.enable=true
          -Drp.endpoint=$(getSecretsStep.RP_URL)
          -Drp.attributes="env:dev-gcp;type:api;runner:azure"
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'API tests'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
