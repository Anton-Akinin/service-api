name: service-api
resources:
  containers:
  - container: kaniko
    image: 'gcr.io/kaniko-project/executor:$(kaniko-version)'
  repositories:
    - repository: rpKubernetes
      type: github
      name: reportportal/kubernetes
      endpoint: reportportal

trigger:
- stable-azure

stages:
- stage: assemble
  jobs:
  - job: build
    pool: 
      vmImage: $(vm-image)
    steps:
    - bash: |
        snapshotVersion=`cat $(version-file) | grep $(version-property) | cut -d '=' -f2-`
        echo "##vso[task.setvariable variable=snapshotVersion;isOutput=true]$snapshotVersion"

        buildVersion=`echo AZURE-BUILD-$(Build.BuildId)`
        echo "##vso[task.setvariable variable=buildVersion;isOutput=true]$buildVersion"
        
        serviceVersion=`echo "${snapshotVersion}-${buildVersion}"`
        echo "##vso[task.setvariable variable=serviceVersion;isOutput=true]$serviceVersion"
        tag=`echo "$serviceVersion" | tr '[:upper:]' '[:lower:]'`
        echo "##vso[task.setvariable variable=tag;isOutput=true]$tag"
      name: getVersions
      displayName: 'Get application versions'

    - bash: |
        echo "$(getVersions.snapshotVersion)"
        echo "$(getVersions.buildVersion)"
        echo "$(getVersions.serviceVersion)"
        echo "$(getVersions.tag)"
      displayName: 'Print application versions'

    - task: Docker@2
      displayName: Login to GCR
      inputs:
        command: login
        repository: $(repository)
        containerRegistry: gcr-rp-demo

    - task: Docker@2
      displayName: Build container
      inputs:
        command: build
        Dockerfile: 'docker/Dockerfile-develop'
        repository: $(repository)
        tags: '$(getVersions.tag)'
        buildContext: '$(Build.Repository.LocalPath)'
        arguments: '--build-arg buildNumber=$(getVersions.buildVersion)'

    - task: Docker@2
      displayName: Push image
      inputs:
        command: push
        repository: $(repository)
        tags: '$(getVersions.tag)'

    - task: Docker@2
      displayName: Logout from ACR
      inputs:
        command: logout
        containerRegistry: gcr-rp-demo

- stage: deploy
  dependsOn: assemble
  variables:
    tag: $[ stageDependencies.assemble.build.outputs['getVersions.tag'] ]
  jobs:
  - job: install
    pool: 
      vmImage: $(vm-image)
    steps:

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: |
          git.epam.com,217.21.63.117 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDT6RwUv9Mis/38mDtHK3dKcXGJ+nhucUwCSTh0dMu66Ui2/5DrJ1XadJ2vOATGPwzEtlhmstKHs6pDegmxBOq0=
        sshKeySecureFile: 'epm-gitlab-key'

    - task: HelmInstaller@0
      inputs:
        helmVersion: '3.3.4'
        installKubectl: true

    - bash: |
        cd ..
        git clone git@git.epam.com:epmc-tst/reportportal-ci.git --progress --branch master --single-branch --depth=1
      displayName: 'Clone CI repository'

    - checkout: rpKubernetes

    - bash: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add elastic https://helm.elastic.co
        helm repo update
        helm dependency update reportportal/v5/
      displayName: 'Helm setup'

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'gke-rp-demo'
        namespace: '$(namespace)'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'reportportal/v5/'
        releaseName: 'reportportal'
        overrideValues: '"serviceapi.repository=gcr.io/or2-msq-epmc-tst-t1iylu/reportportal/service-api,serviceapi.tag=$(tag),serviceapi.jvmArgs=-Xms2G\ -Xmx3g\ -DLOG_FILE=app.log\ -XX:+HeapDumpOnOutOfMemoryError\ -XX:HeapDumpPath=/tmp\ -agentpath:/app/drill/libdrill_agent.so=agentId=api-service\,drillInstallationDir=/app/drill\,adminAddress=drill4j-admin.ci.svc.cluster.local:8090\,buildVersion=$(tag)"'
        valueFile: '../reportportal-ci/rp/values-ci.yml'
        install: false
        waitForExecution: false

  - job: verify
    dependsOn: install
    pool: 
      vmImage: $(vm-image)
    steps:

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - bash: |
        set +e
        echo "Retrieving service ${SRV} endpoints in namespace ${NS}"
        endpoints=`kubectl -n ${NS} get endpoints ${SRV} --no-headers | awk '{ print $2 }'`
        for endpoint in ${endpoints}; do
          host=`echo ${endpoint} | cut -d : -f 1`
          port=`echo ${endpoint} | cut -d : -f 2`
          pod=`kubectl get pods -o wide -n ${NS} --no-headers | grep ${host} | awk '{ print $1 }'`
          echo "Checking host: ${host}; port: ${port}; pod: ${pod}"
          kubectl port-forward -n ${NS} pod/${pod} ${port}:${port} &
          sleep ${TIMEOUT}
          deployed=false
          for i in `seq 0 ${ATTEMPTS}`; do
            response_file='response.txt'
            status_code=`curl -s -o ./${response_file} -w "%{http_code}" "http://localhost:${port}/info"`
            r_body=`cat ./${response_file}`
            if [ ${status_code} -ne 200 ]; then
                  echo "Request has failed, got status code: ${status_code}"
                  sleep ${TIMEOUT}
                  continue
            fi

            s_version=`echo ${r_body} | jq -r ".build.version" | tr '[:upper:]' '[:lower:]'`
            if [ "${s_version}" == "${VERSION}" ]; then
              deployed=true
              break
            else
              echo "Got service version: ${s_version}; wanted: ${VERSION}"
              sleep ${TIMEOUT}
            fi
          done
          kill $!
          if $deployed; then
            echo "${host} is UP"
          else
              echo "Incorrect Server Version"
              exit 1
          fi
        done
      displayName: 'Deployment test'
      name: deploymentTest
      env:
        SRV: reportportal-api
        NS: $(namespace)
        ATTEMPTS: 30
        TIMEOUT: 10
        VERSION: $(tag)

