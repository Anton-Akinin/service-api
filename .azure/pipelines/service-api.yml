name: service-api
resources:
  repositories:
    - repository: rpKubernetes
      type: github
      name: reportportal/kubernetes
      endpoint: reportportal
    - repository: jdiRest
      type: github
      name: jdi-examples/jdi-dark-report-portal-demo
      endpoint: reportportal
    - repository: jdiUi
      type: github
      name: jdi-examples/jdi-light-report-portal-demo
      endpoint: reportportal
    - repository: jdiMobile
      type: github
      name: jdi-examples/jdi-mobile-report-portal-demo
      endpoint: reportportal

trigger:
- stable-azure

stages:
- stage: SAST
  jobs:
  - job: SAST
    pool: 
      vmImage: $(vm-image)

    steps:
    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: carrierSecret
        displayName: 'Get carrier secret'
        secret: carrier-secret
        namespace: ci

    - template: templates/carrier-run.yaml
      parameters:
        carrierToken: $(carrierSecret.token)
        jobId: $(sastJobId)
        projectId: $(carrierSecret.project_id)
        redisHost: $(carrierSecret.REDIS_HOST)
        redisPassword: $(carrierSecret.REDIS_PASSWORD)
        galloperUrl: $(carrierSecret.galloper_url)
        displayName: 'Run SAST'

- stage: sonar
  dependsOn: []
  jobs:
    - job: sonar
      pool: 
        vmImage: $(vm-image)
      steps:
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'sonarqube'
          scannerMode: 'Other'
      - bash: |
          export SONARQUBE_SCANNER_PARAMS=`echo ${SONARQUBE_SCANNER_PARAMS} | sed 's/"sonar.branch.name":"[^"]*",*//'`
          ./gradlew build sonarqube
        name: sonarAnalyse
      - task: SonarQubePublish@4
        inputs:
          pollingTimeoutSec: '900'

- stage: assemble
  dependsOn: ['SAST', 'sonar']
  jobs:
  - job: build
    pool: 
      vmImage: $(vm-image)
    steps:
    - bash: |
        snapshotVersion=`cat $(version-file) | grep $(version-property) | cut -d '=' -f2-`
        echo "##vso[task.setvariable variable=snapshotVersion;isOutput=true]$snapshotVersion"

        buildVersion=`echo AZURE-BUILD-$(Build.BuildId)`
        echo "##vso[task.setvariable variable=buildVersion;isOutput=true]$buildVersion"
        
        serviceVersion=`echo "${snapshotVersion}-${buildVersion}"`
        echo "##vso[task.setvariable variable=serviceVersion;isOutput=true]$serviceVersion"
        tag=`echo "$serviceVersion" | tr '[:upper:]' '[:lower:]'`
        echo "##vso[task.setvariable variable=tag;isOutput=true]$tag"
      name: getVersions
      displayName: 'Get application versions'

    - bash: |
        echo "$(getVersions.snapshotVersion)"
        echo "$(getVersions.buildVersion)"
        echo "$(getVersions.serviceVersion)"
        echo "$(getVersions.tag)"
      displayName: 'Print application versions'

    - task: Docker@2
      displayName: Login to GCR
      inputs:
        command: login
        repository: $(repository)
        containerRegistry: gcr-rp-demo

    - task: Docker@2
      displayName: Build container
      inputs:
        command: build
        Dockerfile: 'docker/Dockerfile-develop'
        repository: $(repository)
        tags: '$(getVersions.tag)'
        buildContext: '$(Build.Repository.LocalPath)'
        arguments: '--build-arg buildNumber=$(getVersions.buildVersion)'

    - task: Docker@2
      displayName: Push image
      inputs:
        command: push
        repository: $(repository)
        tags: '$(getVersions.tag)'

    - task: Docker@2
      displayName: Logout from ACR
      inputs:
        command: logout
        containerRegistry: gcr-rp-demo

- stage: deploy
  dependsOn: assemble
  variables:
    tag: $[ stageDependencies.assemble.build.outputs['getVersions.tag'] ]
    serviceVersion: $[ stageDependencies.assemble.build.outputs['getVersions.serviceVersion'] ]
  jobs:
  - job: install
    pool: 
      vmImage: $(vm-image)
    steps:

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: |
          git.epam.com,217.21.63.117 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDT6RwUv9Mis/38mDtHK3dKcXGJ+nhucUwCSTh0dMu66Ui2/5DrJ1XadJ2vOATGPwzEtlhmstKHs6pDegmxBOq0=
        sshKeySecureFile: 'epm-gitlab-key'

    - task: HelmInstaller@0
      inputs:
        helmVersion: '3.3.4'
        installKubectl: true

    - bash: |
        cd ..
        git clone git@git.epam.com:epmc-tst/$(build_scripts).git --progress --branch master --single-branch --depth=1
      displayName: 'Clone CI repository'

    - checkout: rpKubernetes

    - bash: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add elastic https://helm.elastic.co
        helm repo update
        helm dependency update reportportal
      displayName: 'Helm setup'

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'gke-rp-demo'
        namespace: '$(namespace)'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'reportportal'
        releaseName: 'reportportal'
        overrideValues: '"serviceapi.repository=gcr.io/or2-msq-epmc-tst-t1iylu/reportportal/service-api,serviceapi.tag=$(tag),serviceapi.jvmArgs=-Xms2G\ -Xmx3g\ -DLOG_FILE=app.log\ -XX:+HeapDumpOnOutOfMemoryError\ -XX:HeapDumpPath=/tmp\ -agentpath:/app/drill/libdrill_agent.so=agentId=api-service\,drillInstallationDir=/app/drill\,adminAddress=drill4j-admin.ci.svc.cluster.local:8090\,buildVersion=$(tag)"'
        valueFile: '../$(build_scripts)/terraform/7_rp/dev/config/values.yml'
        install: false
        waitForExecution: false

  - job: verify
    dependsOn: install
    pool: 
      vmImage: $(vm-image)
    steps:

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/deployment-test.yaml
      parameters:
        serviceName: reportportal-api
        serviceVersion: $(serviceVersion)
        namespace: $(namespace)

- stage: DAST
  dependsOn: deploy
  jobs:
  - job: DAST
    pool: 
      vmImage: $(vm-image)

    steps:
    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: carrierSecret
        displayName: 'Get carrier secret'
        secret: carrier-secret
        namespace: ci

    - template: templates/carrier-run.yaml
      parameters:
        carrierToken: $(carrierSecret.token)
        jobId: $(dastJobId)
        projectId: $(carrierSecret.project_id)
        redisHost: $(carrierSecret.REDIS_HOST)
        redisPassword: $(carrierSecret.REDIS_PASSWORD)
        galloperUrl: $(carrierSecret.galloper_url)
        displayName: 'Run DAST'

- stage: test
  dependsOn: deploy
  
  jobs:
  - job: apiTests
    pool: 
      vmImage: $(vm-image)
    steps:
    - checkout: jdiRest

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: jdiSecret
        displayName: 'Get test secret'
        secret: jdi-test-secret
        namespace: ci

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: >-
          -B
          -Dsut.username=$(jdiSecret.TEST_USER_LOGIN)
          -Dsut.password=$(jdiSecret.TEST_USER_PASSWORD)
          -Pdev_env -Preport
          -Dbuild.tag="AZURE-BUILD-$(Build.BuildId)"
          -Drp.uuid=$(jdiSecret.RP_UUID)
          -Drp.project=$(jdiSecret.RP_PROJECT)
          -Drp.enable=true
          -Drp.endpoint=$(jdiSecret.RP_URL)
          -Drp.attributes="env:dev-gcp;type:api;runner:azure"
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'API tests'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    
  - job: uiTests
    pool: 
      vmImage: $(vm-image)
    steps:
    - checkout: jdiUi

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: jdiSecret
        displayName: 'Get test secret'
        secret: jdi-test-secret
        namespace: ci

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: saucelabsSecret
        displayName: 'Get saucelabs secret'
        secret: saucelabs-accesskey
        namespace: ci

    - bash: |
        export KEY=$(saucelabsSecret.accesskey)
        echo 'echo "##vso[task.setvariable variable=SAUCELABS_URL;isOutput=true;issecret=true]$(saucelabs-url)"' >url.sh
        source url.sh
      name: prepareSaucelabsUrl
      displayName: 'Get saucelabs URL'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: minioSecret
        displayName: 'Get minio secret'
        secret: minio-genrocket
        namespace: ci

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: >-
          -B
          -Pdefault
          -Dtest=!GenRocketLoginTest
          -Drp.uuid=$(jdiSecret.RP_UUID)
          -Drp.project=$(jdiSecret.RP_PROJECT)
          -Drp.enable=true
          -Drp.endpoint=$(jdiSecret.RP_URL)
          -Drp.attributes="env:dev-gcp;type:ui;runner:azure"
          -Dreport.portal.user=$(jdiSecret.TEST_USER_LOGIN)
          -Dreport.portal.password=$(jdiSecret.TEST_USER_PASSWORD)
          -Dminio.url=http://minio-genrocket.ci.svc.cluster.local:9000
          -Dminio.accesskey=$(minioSecret.ACCESSKEY)
          -Dminio.secretkey=$(minioSecret.SECRETKEY)
          -Dwebdriver.remote.url=$(prepareSaucelabsUrl.SAUCELABS_URL)
          -Dbuild.tag="AZURE-BUILD-$(Build.BuildId)"
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'UI tests'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

  - job: mobileTests
    pool: 
      vmImage: $(vm-image)
    steps:
    - checkout: jdiMobile

    - task: Kubernetes@1
      displayName: 'Login to kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'gke-rp-demo'
        namespace: 'reportportal'
        command: 'login'

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: jdiSecret
        displayName: 'Get test secret'
        secret: jdi-test-secret
        namespace: ci

    - template: templates/kubectl-secret-get.yaml
      parameters:
        name: saucelabsSecret
        displayName: 'Get saucelabs secret'
        secret: saucelabs-accesskey
        namespace: ci

    - bash: |
        export KEY=$(saucelabsSecret.accesskey)
        echo 'echo "##vso[task.setvariable variable=SAUCELABS_URL;isOutput=true;issecret=true]$(saucelabs-url)"' >url.sh
        source url.sh
      name: prepareSaucelabsUrl
      displayName: 'Get saucelabs URL'

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '8'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: >-
          -B
          -Dreport.portal.user=$(jdiSecret.TEST_USER_LOGIN)
          -Dreport.portal.password=$(jdiSecret.TEST_USER_PASSWORD)
          -Dwebdriver.remote.url=$(prepareSaucelabsUrl.SAUCELABS_URL)
          -Dmobile.cloud.type=saucelabs
          -Dmobile.platform.name=Android
          -Dmobile.platform.version=11
          -Dmobile.device.name=".*nexus.*"
          -Dmobile.device.orientation=portrait
          -Dbuild.tag="AZURE-BUILD-$(Build.BuildId)"
          -Drp.uuid=$(jdiSecret.RP_UUID)
          -Drp.project=$(jdiSecret.RP_PROJECT)
          -Drp.enable=true
          -Drp.endpoint=$(jdiSecret.RP_URL)
          -Drp.attributes="env:dev-gcp;type:mobile;runner:azure"
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'Mobile tests'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
