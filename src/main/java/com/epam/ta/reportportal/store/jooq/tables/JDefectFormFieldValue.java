/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.store.jooq.tables;


import com.epam.ta.reportportal.store.jooq.JPublic;
import com.epam.ta.reportportal.store.jooq.Keys;
import com.epam.ta.reportportal.store.jooq.tables.records.JDefectFormFieldValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDefectFormFieldValue extends TableImpl<JDefectFormFieldValueRecord> {

    private static final long serialVersionUID = -1079968258;

    /**
     * The reference instance of <code>public.defect_form_field_value</code>
     */
    public static final JDefectFormFieldValue DEFECT_FORM_FIELD_VALUE = new JDefectFormFieldValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDefectFormFieldValueRecord> getRecordType() {
        return JDefectFormFieldValueRecord.class;
    }

    /**
     * The column <code>public.defect_form_field_value.id</code>.
     */
    public final TableField<JDefectFormFieldValueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.defect_form_field_value.values</code>.
     */
    public final TableField<JDefectFormFieldValueRecord, String> VALUES = createField("values", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.defect_form_field_value</code> table reference
     */
    public JDefectFormFieldValue() {
        this(DSL.name("defect_form_field_value"), null);
    }

    /**
     * Create an aliased <code>public.defect_form_field_value</code> table reference
     */
    public JDefectFormFieldValue(String alias) {
        this(DSL.name(alias), DEFECT_FORM_FIELD_VALUE);
    }

    /**
     * Create an aliased <code>public.defect_form_field_value</code> table reference
     */
    public JDefectFormFieldValue(Name alias) {
        this(alias, DEFECT_FORM_FIELD_VALUE);
    }

    private JDefectFormFieldValue(Name alias, Table<JDefectFormFieldValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private JDefectFormFieldValue(Name alias, Table<JDefectFormFieldValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JDefectFormFieldValueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JDefectFormFieldValueRecord, ?>>asList(Keys.DEFECT_FORM_FIELD_VALUE__DEFECT_FORM_FIELD_VALUE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JDefectFormFieldValue as(String alias) {
        return new JDefectFormFieldValue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JDefectFormFieldValue as(Name alias) {
        return new JDefectFormFieldValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefectFormFieldValue rename(String name) {
        return new JDefectFormFieldValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefectFormFieldValue rename(Name name) {
        return new JDefectFormFieldValue(name, null);
    }
}
